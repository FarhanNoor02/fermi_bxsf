# -*- coding: utf-8 -*-
"""fermi_bxsf.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1vu8jXnt-sTjhZeTcI7F7ts93reSJjM_u
"""



import numpy as np
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
from skimage.measure import marching_cubes
import os

def read_bxsf(filename):
    data = {
        'fermi_energy': None,
        'band_data': [],
        'grid_dimensions': None,
        'origin': None,
        'vectors': None
    }

    with open(filename, 'r') as f:
        lines = [line.strip() for line in f.readlines() if line.strip()]

    i = 0
    while i < len(lines):
        line = lines[i]

        if 'Fermi Energy:' in line:
            data['fermi_energy'] = float(line.split(':')[1].strip())
            i += 1
        elif line == 'BEGIN_BLOCK_BANDGRID_3D':
            i += 1
            while i < len(lines) and lines[i] != 'BANDGRID_3D_BANDS':
                i += 1
            i += 1

            n_bands = int(lines[i])
            i += 1
            data['grid_dimensions'] = list(map(int, lines[i].split()))
            i += 1
            data['origin'] = list(map(float, lines[i].split()))
            i += 1

            data['vectors'] = []
            for _ in range(3):
                data['vectors'].append(list(map(float, lines[i].split())))
                i += 1

            for band_idx in range(n_bands):
                while i < len(lines) and not lines[i].startswith('BAND:'):
                    i += 1
                if i >= len(lines): break
                i += 1

                band_data = []
                total_points = np.prod(data['grid_dimensions'])
                while len(band_data) < total_points and i < len(lines):
                    if lines[i].startswith('BAND:'): break
                    band_data.extend(map(float, lines[i].split()))
                    i += 1

                if len(band_data) == total_points:
                    band_data = np.array(band_data).reshape(*data['grid_dimensions'])
                    data['band_data'].append(band_data)
        else:
            i += 1

    return data

def plot_fermi_surface(bxsf_data, band_index=0, isovalue=None, show_plot=True):
    if isovalue is None:
        isovalue = bxsf_data['fermi_energy']

    if band_index >= len(bxsf_data['band_data']):
        print(f"Error: Band index {band_index} is out of range.")
        return

    band_data = bxsf_data['band_data'][band_index]
    nx, ny, nz = bxsf_data['grid_dimensions']
    vecs = np.array(bxsf_data['vectors'])
    recip_lattice = 2 * np.pi * np.linalg.inv(vecs).T  # Reciprocal vectors

    verts, faces, _, _ = marching_cubes(band_data, isovalue)

    # Normalize and convert to reciprocal space
    verts[:, 0] /= (nx - 1)
    verts[:, 1] /= (ny - 1)
    verts[:, 2] /= (nz - 1)

    # Shift coordinates so Gamma point is at center (0.5, 0.5, 0.5) -> (0, 0, 0)
    verts = verts - 0.5

    verts_recip = verts @ recip_lattice

    fig = plt.figure(figsize=(10, 8))
    ax = fig.add_subplot(111, projection='3d')

    ax.plot_trisurf(verts_recip[:, 0], verts_recip[:, 1], faces, verts_recip[:, 2],
                    cmap='inferno', edgecolor='none', alpha=1.0)

    # Bounding box - now centered around Gamma point
    min_corner = verts_recip.min(axis=0)
    max_corner = verts_recip.max(axis=0)

    # Define bounding box corners
    corners = np.array([
        [min_corner[0], min_corner[1], min_corner[2]],
        [min_corner[0], min_corner[1], max_corner[2]],
        [min_corner[0], max_corner[1], min_corner[2]],
        [min_corner[0], max_corner[1], max_corner[2]],
        [max_corner[0], min_corner[1], min_corner[2]],
        [max_corner[0], min_corner[1], max_corner[2]],
        [max_corner[0], max_corner[1], min_corner[2]],
        [max_corner[0], max_corner[1], max_corner[2]],
    ])

    # Define pairs of corners to connect with lines (edges of the cube)
    edges = [
        (0,1), (0,2), (0,4),
        (1,3), (1,5),
        (2,3), (2,6),
        (3,7),
        (4,5), (4,6),
        (5,7),
        (6,7),
    ]

    for start, end in edges:
        ax.plot3D(*zip(corners[start], corners[end]), color='black', lw=1.2)

    # Hide axis & grids
    ax.set_axis_off()

    # High-symmetry points (cubic example) - now centered around Gamma
    high_sym_points = {
        r'$\Gamma$': [0.0, 0.0, 0.0],  # Now at center
        'X': [0.5, 0.0, 0.0],
        'M': [0.5, 0.5, 0.0],
        'R': [0.5, 0.5, 0.5],
    }
    for label, coord in high_sym_points.items():
        k_cart = np.dot(coord, recip_lattice)
        ax.text(*k_cart, label, fontsize=25, weight='bold', color='black')

    ax.set_box_aspect([1,1,1])
    plt.tight_layout()
    if show_plot:
        plt.show()

def main():
    filename = input("Enter path to BXSF file: ").strip('"').strip("'")
    band_index = int(input("Enter band index (default 0): ") or "0")
    isovalue_input = input("Enter isovalue (default Fermi energy): ")
    isovalue = float(isovalue_input) if isovalue_input else None

    if not os.path.exists(filename):
        print(f"File not found: {filename}")
        return

    print(f"Reading {filename}...")
    bxsf_data = read_bxsf(filename)
    print(f"Successfully read file with {len(bxsf_data['band_data'])} bands")
    print(f"Fermi energy: {bxsf_data['fermi_energy']} eV")
    print(f"Grid dimensions: {bxsf_data['grid_dimensions']}")

    plot_fermi_surface(bxsf_data, band_index=band_index, isovalue=isovalue)

if __name__ == "__main__":
    main()